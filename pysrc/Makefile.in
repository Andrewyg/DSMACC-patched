##############################################################################
# -*- sh -*-
##############################################################################
#
#  DSMACC - The Dynamically Simple Model of Atmospheric Chemical Complexity
#        uses KPP to build simulation code for chemical kinetic systems
#
##############################################################################

# Basic compilers and compiler options are selected using configure

# 1. The name of the compiler you want to use. Normaly this 
#    is either GNU C compiler (gcc) or the native compiler (cc)
#    You can use the complete pathname if the compiler is not in $PATH 
#    Note that for SUN machines is better to use gcc.
#    For GNU C compiler use:
#      CC=gcc
#    For the native compiler use:
#      CC=cc

CC=@CC@

# 2. Platform independent C compiler flags. By default "-O" is used which 
#    turns on optimisation. If you are experiencing problems you may try 
#    "-g" to include debuging informations.

CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@

# 3. KPP requires a lexical analizer like FLEX to be used.
#    FLEX is a public domain lexical analizer and you can download it from
#    http://www.gnu.org/software/flex/ or any other mirror site. If flex
#    directory is not included in your path use the complete pathname.

FLEX=@LEX@

# 4. Flex library. Can either be -lfl or the full path to a libfl.a
FLEX_LIB=@LEXLIB@


# 5. Linker flags to ensure access to the libraries including libfl.a
#    If libfl.a is in a standard location, this can be blank.
#    Otherwise LDFLAGS=-L<DIRPATH> where DIRPATH is the path that
#    contains libfl.a
LDFLAGS=@LDFLAGS@

# 6. The name of the fortran compiler you want to use. Normaly this 
#    is either GNU Fortran compiler (gfortran), the Intel Fortran
#    compiler (ifort), or the Portland Group Compiler.
#    For GNU C compiler use:
#      FC=gfortran
#    For the Intel compiler use:
#      FC=ifort

FC=@FC@

# 6. Platform independent C compiler flags. By default "-O" is used which 
#    turns on optimisation. If you are experiencing problems you may try 
#    "-g" to include debuging informations.

F90FLAGS=@FCFLAGS_f90@ @FCFLAGS@

export KPP_HOME=$(PWD)/../kpp

##############################################################################
all:
	make source
#	make pykpp
#	make test

# link TUV inputs for the run
inputs:
	ln -fs ../tuv_new/INPUTS ../tuv_new/DATA* .

# build the standard cri model including f90 and objects
source:
	make -C ../kpp
	make -C ../ISOROPIA/
	make -C ../src libtuv.a
	make -C ../src libfastjx.a
	make -C ../cri src/dsmacc_Main.f90
	make -C ../geoschem src/dsmacc_Main.f90

install: source
	python setup.py install -f
# Run the model and make a plot
test: install
	python box.py; python plot.py boxconc.dat cri_isop_box.png
	python trajectory.py; python plot.py trajectoryconc.dat cri_isop_trajectory.png

